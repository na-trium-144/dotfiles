# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# env check
export _hostname=$(hostname)
export _uname=$(uname) # Darwin, Linux, MINGW64_NT_*, MSYS_NT_*, CYGWIN_NT_*
echo "${_uname}" | grep _NT >/dev/null && export _uname=MINGW64_NT
export LANG=${LANG:-"C.UTF-8"} # "C" or "C.UTF-8" or other
export _chezmoi_root="${HOME}/.local/share/chezmoi"
[[ -d $_chezmoi_root ]] || export _chezmoi_root=$(echo /c/Users/*/.local/share/chezmoi)
[[ -d $_chezmoi_root ]] || echo "chezmoi root not found!"
export _winhome="/c/Users/$(basename ${HOME})"

# PATH
source ${_chezmoi_root}/scripts/brew_local_aliases.sh
if [[ "${_uname}" = "Darwin" ]]; then
    export PATH="/opt/homebrew/bin:$PATH"
    export PATH="/Applications/Sublime Text.app/Contents/SharedSupport/bin:$PATH"
fi
[[ -d /home/linuxbrew/.linuxbrew ]] && eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
source ${_chezmoi_root}/scripts/load_pyenv.sh
source ${_chezmoi_root}/scripts/load_nvm.sh
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"
export PIPENV_VENV_IN_PROJECT=1
[[ -f ~/.fzf.bash ]] && source ~/.fzf.bash
export PATH="$HOME/.cargo/bin:$_winhome/.cargo/bin:$PATH"
export PATH="$HOME/.local/share/gem/ruby/3.0.0/bin:$PATH"
if [ -d "$HOME/.asdf" ]; then
    . "$HOME/.asdf/asdf.sh"
    . "$HOME/.asdf/completions/asdf.bash"
fi
[[ "${_uname}" = "MINGW64_NT" ]] && export MC_XDG_OPEN="$_chezmoi_root/scripts/win_open.sh"
[[ "${_uname}" = "Darwin" ]] && export MC_XDG_OPEN="open"
type ninja 1>/dev/null 2>&1 && export CMAKE_GENERATOR=Ninja
export NINJA_STATUS=$'\033[1;30;106m%f\033[0;90;106m/%t\033[103;96m\033[30;103m%w\033[90m~%W\033[0;93m\033[0m '
export PATH="/opt/webcface/bin:${PATH}"
export PATH="/opt/mujoco/bin:${PATH}"
export PATH="${PATH}:${HOME}/.robotech/bin"
export PATH="${HOME}/.local/bin:${PATH}"

if [[ "${_uname}" = "MINGW64_NT" ]] && [[ -z "$(ps -ef | grep git-core)" ]] && [[ -d "$HOME/.cache/git/credential" ]]; then
    echo "git-core not running - removing git credential cache"
    rm -vrf "$HOME/.cache/git/credential"
fi

# automatically start tmux
if which tmux >/dev/null; then
	if tmux -V | grep "tmux 3" >/dev/null; then
		if [[ $- =~ i ]] && [[ -z "$TMUX" ]] && [[ -n "$SSH_TTY" ]]; then
			tmux attach-session -t ssh_tmux || tmux new-session -s ssh_tmux
		fi
	else
		echo "tmux version is old: $(tmux -V)"
	fi
fi

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

# enable color support of ls and also add handy aliases
# if [ -x /usr/bin/dircolors ]; then
    # test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
if [ "$color_prompt" = yes ]; then
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
# alias ll='ls -alF'
# alias la='ls -A'
# alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
# alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

# if [ -f ~/.bash_aliases ]; then
    # . ~/.bash_aliases
# fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

if [[ "${_uname}" = "Darwin" ]]; then
    [[ -r "/opt/homebrew/etc/profile.d/bash_completion.sh" ]] && . "/opt/homebrew/etc/profile.d/bash_completion.sh"
    source /opt/homebrew/etc/bash_completion.d/*
fi
# [[ -e ~/.git-prompt.sh ]] && source ~/.git-prompt.sh
[[ -e ~/.git-completion.bash ]] && source ~/.git-completion.bash

if [[ $LANG != C && -f "$_chezmoi_root/scripts/ps1.sh" ]]; then
    source "$_chezmoi_root/scripts/ps1.sh"
else
    alias __git_ps1="bash $_chezmoi_root/scripts/git_ps1.sh"
    export PROMPT_COMMAND=
    if [ "$color_prompt" = yes ]; then
        # PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\[\033[1;31m\]$(__git_ps1)\[\033[00m\]\$ '
        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;31m\]\u@\h\[\033[0m\]:\[\033[01;36m\]\w\[\033[0;32m\]$(__git_ps1)\[\033[00m\]\$ '
    else
        PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w$(__git_ps1)\$ '
    fi
    unset color_prompt force_color_prompt

    # If this is an xterm set the title to user@host:dir
    case "$TERM" in
    xterm*|rxvt*)
        PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \W\a\]$PS1"
        ;;
    *)
        ;;
    esac
fi

[[ -f "$_chezmoi_root/scripts/aliases.sh" ]] && source "$_chezmoi_root/scripts/aliases.sh"
[[ -f ~/.bash_aliases ]] && source ~/.bash_aliases

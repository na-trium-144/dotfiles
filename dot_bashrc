# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

export PATH="${PATH}:${HOME}/.robotech/bin"
export PATH="${HOME}/.local/bin:${PATH}"

_hostname=$(hostname)
_uname=$(uname)
# Darwin, Linux, MINGW64_NT_*
echo "${_uname}" | grep MINGW64 >/dev/null && _uname=MINGW64_NT

if [ "${_uname}" = "Darwin" ]; then
    export PATH="/opt/homebrew/bin:$PATH"
    export PATH="/opt/homebrew/opt/llvm/bin:$PATH"
    export PATH="/Applications/Sublime Text.app/Contents/SharedSupport/bin:$PATH"
fi

# automatically start tmux
if [[ $- =~ i ]] && [[ -z "$TMUX" ]] && [[ -n "$SSH_TTY" ]]; then
	tmux attach-session -t ssh_tmux || tmux new-session -s ssh_tmux
fi

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

# if [ -f ~/.bash_aliases ]; then
    # . ~/.bash_aliases
# fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

if [ "${_uname}" = "Darwin" ]; then
    [[ -r "/opt/homebrew/etc/profile.d/bash_completion.sh" ]] && . "/opt/homebrew/etc/profile.d/bash_completion.sh"
    source /opt/homebrew/etc/bash_completion.d/*
fi
[ -e ~/.git-prompt.sh ] && source ~/.git-prompt.sh
[ -e ~/.git-completion.bash ] && source ~/.git-completion.bash

export PATH="${HOME}/.pyenv/bin:$PATH"
if type pyenv >/dev/null 2>&1; then
    eval "$(pyenv init --path)"
    # eval "$(pyenv virtualenv-init -)"
fi

export PIPENV_VENV_IN_PROJECT=1

[ -d "$HOME/.nvm" ] && export NVM_DIR="$HOME/.nvm"
[ -d "$XDG_CONFIG_HOME/nvm" ] && export NVM_DIR="$XDG_CONFIG_HOME/nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

export PATH="$HOME/.cargo/bin:$PATH"
export PATH="$HOME/.local/share/gem/ruby/3.0.0/bin:$PATH"

if [ -d "$HOME/.asdf" ]; then
	. "$HOME/.asdf/asdf.sh"
	. "$HOME/.asdf/completions/asdf.bash"
fi

GIT_PS1_SHOWDIRTYSTATE=true
GIT_PS1_SHOWSTASHSTATE=true
GIT_PS1_SHOWUPSTREAM="verbose"

function _dirs_state(){
	local _dirs_c=$(($(dirs -p | wc -l) - 1))
	[[ $_dirs_c != 0 ]] && echo "^${_dirs_c}"
}
_code=
function _set_code(){
	_code=$?
	[[ $_code = 0 ]] && _code=
}
if [ -d /dev/shm ]; then
    __git_ps1_file=/dev/shm/kou-git
elif [ -d /tmp ]; then
    __git_ps1_file=/tmp/kou-git
else
    __git_ps1_file="$HOME/.kou-git"
fi
__git_ps1_timeout=2
function __git_ps1_async(){
	if [[ "$__git_ps1_timeout" != "0" ]]; then
		sleep $__git_ps1_timeout & local tp=$!
		(__git_ps1 | sed "s/(\\(.*\\))/(\\1 @$(git config user.name))/" >$__git_ps1_file; kill -9 $tp) >/dev/null 2>&1 &
		#local tp2=$!
		wait $tp
		cat $__git_ps1_file
		#kill -2 $tp2 2>/dev/null &
	fi
}
export PROMPT_COMMAND=_set_code # 他のps1のコマンドより先に実行しないといけない

export LANG=${LANG:-"C.utf8"}
if [ $LANG != C ]; then
    FACE=
    [ "${_hostname}" = "kou-RockLM" ] && FACE='ε=ヾ(・∀ ・)ﾉ'
    [ "${_hostname}" = "kou-Rock11" ] && FACE='(9 ･ω･)9 ' # あとでかえる?
    [ "${_hostname}" = "kou-Ace" ] && FACE='(σ ･∀ ･)σ '
    [ "${_hostname}" = "kou-MAir.local" ] && FACE='･_･)φ_'
    [ "${_hostname}" = "kou-Surf" ] && FACE='(9 ･ω･)9 '
	PS1_TIT='\[\e]0;${debian_chroot:+($debian_chroot)}\W '${FACE}'\a\]'
	PS1_CHROOT='${debian_chroot:+($debian_chroot)}'
	PS1_HOST='\[\033[1;107;31m\]\h\[\033[0;107m\]:'
	PS1_DIR='\[\033[1;107;36m\]\w'
	PS1_DIRS='\[\033[0;107;36m\]$(_dirs_state)'
	PS1_GIT='\[\033[0;107;32m\]$(__git_ps1_async) '
	PS1_FACE='\[\033[0;107;33m\]'${FACE}
	PS1_END='\[\033[0;107;31m\]${_code}\[\033[0;107;32m\] #\#\[\033[0;97m\]\[\033[0m\] '
	if [ "${_hostname}" = "kou-RPi3" ]; then
        FACE='kou- '
        PS1_TIT='\[\e]0;${debian_chroot:+($debian_chroot)}\W '${FACE}'\a\]'
        PS1_HOST='\[\033[1;107;31m\]'${FACE}'\[\033[0;107m\]:'
    fi
    if [ -n "$MC_SID" ]; then
		PS1_HOST='[mc]\[\033[1;107;31m\]\h\[\033[0;107m\]:'
		PS1_DIR='\[\033[1;107;36m\]\W'
    fi
	PS1="$PS1_TIT$PS1_CHROOT$PS1_HOST$PS1_DIR$PS1_DIRS$PS1_GIT$PS1_FACE$PS1_END"
else
    if [ "$color_prompt" = yes ]; then
        # PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\[\033[1;31m\]$(__git_ps1)\[\033[00m\]\$ '
        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;31m\]\u@\h\[\033[0m\]:\[\033[01;36m\]\w\[\033[0;32m\]$(__git_ps1)\[\033[00m\]\$ '
    else
        PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w$(__git_ps1)\$ '
    fi
    unset color_prompt force_color_prompt

    # If this is an xterm set the title to user@host:dir
    case "$TERM" in
    xterm*|rxvt*)
        PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \W\a\]$PS1"
        ;;
    *)
        ;;
    esac
fi

echo ${_hostname} | grep kou- >/dev/null 2>&1 || export __is_vm=1

chezmoi_bash="${HOME}/.local/share/chezmoi/scripts/bash"
[ -f $chezmoi_bash ] || chezmoi_bash=$(echo /c/Users/*/.local/share/chezmoi/scripts/bash)
if [ -f $chezmoi_bash ]; then
    . "$chezmoi_bash"
fi

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi
